name: CICD Pipeline 

on:
  push:
    branches:
      - master
      
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: | 
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run DVC ML-Pipeline 
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          dvc repro

      - name: Run test
        env: 
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT }}
        run: |
          python -m pytest tests/test_model.py -v

      - name: Promote model to Production
        if: success()
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT}}
        run: |
          python scripts/promote_model.py

      - name: Run Flask app test
        if: success()
        env:
          DAGSHUB_PAT: ${{ secrets.DAGSHUB_PAT}}
        run: |
          python -m pytest tests/test_flask_app.py -v 
      
      - name: Login to ECR
        if: success()
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 890742587077.dkr.ecr.us-east-1.amazonaws.com
      
      - name: Build Docker image
        if: success()
        run: |
          docker build -t mlops-small-project .

      - name: Tag Docker image
        if: success()
        run: |
          docker tag mlops-small-project:latest 890742587077.dkr.ecr.us-east-1.amazonaws.com/mlops-small-project:latest
      
      - name: Push Docker image to ECR
        if: success()
        run: |
          docker push 890742587077.dkr.ecr.us-east-1.amazonaws.com/mlops-small-project:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Zip files for deployment
        run: |
          zip -r deployment.zip appspec.yml deploy/scripts/install_dependencies.sh deploy/scripts/start_sentiment_app.sh

      - name: Upload deployment zip to s3
        if: success()
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws s3 cp deployment.zip s3://sentiment-app-code-deploy/deployment.zip

      - name: Deploy to AWS CodeDeploy
        if: success()
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws deploy create-deployment \
            --application-name sentiment-app35 \
            --deployment-config-name CodeDeployDefault.OneAtATime \
            --deployment-group-name sentiment-app35-dpgrp \
            --s3-location bucket=sentiment-app-code-deploy,key=deployment.zip,bundleType=zip \
            --file-exists-behavior OVERWRITE \
            --region us-east-1